/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View.Admin;

import Controller.AdminController;
import Model.Funcionario;
import Model.Vendedor;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pedro
 */
public class ListarFuncionarios extends javax.swing.JPanel {
    JFrame frame ;
    DefaultTableModel model;
    
    
    public ListarFuncionarios( JFrame frame) {
        this.frame = frame;
        initComponents();
                model = new DefaultTableModel();
		model.addColumn("Id");
		model.addColumn("Nome");
		model.addColumn("Apelido");
		model.addColumn("Categoria");
		model.addColumn("Salario");
		model.addColumn("E-Mail");
		model.addColumn("Nacionalidade");
		
		
       Tabela.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabela = new javax.swing.JTable();
        Activos = new javax.swing.JRadioButton();
        Demitidos = new javax.swing.JRadioButton();
        listarTodos = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        Tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(Tabela);

        Activos.setText("Listar Ativos");
        Activos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActivosActionPerformed(evt);
            }
        });

        Demitidos.setText("Listar Demitidos");
        Demitidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemitidosActionPerformed(evt);
            }
        });

        listarTodos.setText("Listar Todos");
        listarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarTodosActionPerformed(evt);
            }
        });

        jButton1.setText("Limpar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(221, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(listarTodos)
                                .addGap(132, 132, 132))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(146, 146, 146)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Activos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Demitidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Activos)
                    .addComponent(jButton1))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Demitidos)
                    .addComponent(listarTodos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarTodosActionPerformed
     if(listarTodos.isSelected()){
         
          while (model.getRowCount() > 0) {
			model.removeRow(0);
		}
          
          AdminController cc = new AdminController(frame);
         ArrayList<Funcionario> lista;
         try {
             lista = cc.sellectAllFuncionario();
               for (Funcionario v : lista) {             
			model.addRow(new Object[] {   v.getId(), v.getNome(),v.getApelido(),v.getEspecialidade(),v.getSalario(), v.geteMail(), v.getNaturalidade() });
		}
         } catch (SQLException ex) {
             Logger.getLogger(ListarFuncionarios.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ListarFuncionarios.class.getName()).log(Level.SEVERE, null, ex);
         }
    
     }
    }//GEN-LAST:event_listarTodosActionPerformed

    private void ActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActivosActionPerformed
    if(Activos.isSelected()){
    Demitidos.setSelected(false);
    listarTodos.setSelected(false);
    
     while (model.getRowCount() > 0) {
			model.removeRow(0);
		}
          
          AdminController cc = new AdminController(frame);
         ArrayList<Funcionario> lista;
         try {
             lista = cc.sellectAllFuncionario();
               for (Funcionario v : lista) {
	  
           if(v.isEstado()){
           
                 
			model.addRow(new Object[] {   v.getId(), v.getNome(),v.getApelido(),v.getEspecialidade(),v.getSalario(), v.geteMail(), v.getNaturalidade() });
		
           }}
         } catch (SQLException ex) {
             Logger.getLogger(ListarFuncionarios.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ListarFuncionarios.class.getName()).log(Level.SEVERE, null, ex);
         }
    
    }
    }//GEN-LAST:event_ActivosActionPerformed

    private void DemitidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemitidosActionPerformed
     if(Demitidos.isSelected()){
    Activos.setSelected(false);
    listarTodos.setSelected(false);
     while (model.getRowCount() > 0) {
			model.removeRow(0);
		}
          
          AdminController cc = new AdminController(frame);
         ArrayList<Funcionario> lista;
         try {
             lista = cc.sellectAllFuncionario();
               for (Funcionario v : lista) {
	  
           if(!v.isEstado()){
           
                 
			model.addRow(new Object[] {   v.getId(), v.getNome(),v.getApelido(),v.getEspecialidade(),v.getSalario(), v.geteMail(), v.getNaturalidade() });
		
           }}
         } catch (SQLException ex) {
             Logger.getLogger(ListarFuncionarios.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(ListarFuncionarios.class.getName()).log(Level.SEVERE, null, ex);
         }
    
    }

    }//GEN-LAST:event_DemitidosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        Activos.setSelected(false);
        Demitidos.setSelected(false);
        listarTodos.setSelected(false)
                ;
        
        while (model.getRowCount() > 0) {
			model.removeRow(0);
		}
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Activos;
    private javax.swing.JRadioButton Demitidos;
    private javax.swing.JTable Tabela;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox listarTodos;
    // End of variables declaration//GEN-END:variables
}
